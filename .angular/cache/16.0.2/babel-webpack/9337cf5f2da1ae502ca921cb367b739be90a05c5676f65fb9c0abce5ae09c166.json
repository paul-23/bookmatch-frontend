{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//const BASE = \"https://rickandmortyapi.com/api/\";\nconst BASE = \"http://localhost:8181/api/\";\nconst NUM_BOOKS = 1;\nclass BookService {\n  constructor(http) {\n    this.http = http;\n  }\n  get8RndomBooks() {\n    console.log(this.http.get(BASE + \"book/1\"));\n    return this.http.get(BASE + \"book/\" + getRndom());\n  }\n  getBookByID(id) {\n    return this.http.get(BASE + \"book/\" + id);\n  }\n  getBookByName(title) {\n    return this.http.get(BASE + \"book/title/\" + title);\n  }\n  getBookCover(id) {\n    return this.http.get(BASE + \"book/image/\" + id);\n  }\n  getBookByTitle(title) {\n    return this.http.get(BASE + \"book/title/\" + title);\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});\nexport { BookService };\nfunction getRndom() {\n  let randoms = [];\n  for (let i = 0; i < NUM_BOOKS; i++) {\n    //randoms.push(Math.floor(Math.random() * 5 + 1))\n    randoms.push(1);\n    randoms.push(2);\n  }\n  return randoms;\n}","map":{"version":3,"names":["BASE","NUM_BOOKS","BookService","constructor","http","get8RndomBooks","console","log","get","getRndom","getBookByID","id","getBookByName","title","getBookCover","getBookByTitle","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","randoms","i","push"],"sources":["C:\\Users\\Arnau\\ngular Projects\\bookmatch-frontend\\src\\app\\rick-morty.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n//const BASE = \"https://rickandmortyapi.com/api/\";\nconst BASE = \"http://localhost:8181/api/\";\nconst NUM_BOOKS = 1;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  constructor(private http: HttpClient) { }\n\n  get8RndomBooks(){\n\n    console.log(this.http.get(BASE+\"book/1\"));\n    return this.http.get(BASE+\"book/\"+  getRndom());\n  }\n\n  getBookByID(id: any){\n    return this.http.get(BASE+\"book/\"+id);\n  }\n\n  getBookByName(title: any){\n    return this.http.get(BASE+\"book/title/\"+title);\n  }\n\n  getBookCover(id: any){\n    return this.http.get(BASE+\"book/image/\" + id)\n  }\n\n  getBookByTitle(title: any){\n    return this.http.get(BASE+\"book/title/\" + title)\n  }\n\n}\n\nfunction getRndom(){\n  let randoms = [];\n  for(let i=0;i<NUM_BOOKS;i++){\n    //randoms.push(Math.floor(Math.random() * 5 + 1))\n    randoms.push(1)\n    randoms.push(2)\n\n  }\n  return randoms;\n}\n\n\n"],"mappings":";;AAGA;AACA,MAAMA,IAAI,GAAG,4BAA4B;AACzC,MAAMC,SAAS,GAAG,CAAC;AAEnB,MAGaC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,cAAcA,CAAA;IAEZC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,QAAQ,CAAC,CAAC;IACzC,OAAO,IAAI,CAACI,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,OAAO,GAAGS,QAAQ,EAAE,CAAC;EACjD;EAEAC,WAAWA,CAACC,EAAO;IACjB,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,OAAO,GAACW,EAAE,CAAC;EACvC;EAEAC,aAAaA,CAACC,KAAU;IACtB,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,aAAa,GAACa,KAAK,CAAC;EAChD;EAEAC,YAAYA,CAACH,EAAO;IAClB,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,aAAa,GAAGW,EAAE,CAAC;EAC/C;EAEAI,cAAcA,CAACF,KAAU;IACvB,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAACR,IAAI,GAAC,aAAa,GAAGa,KAAK,CAAC;EAClD;;AAxBWX,WAAW,C;mBAAXA,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXjB,WAAW,C;SAAXA,WAAW;EAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPpB,WAAW;AA4BxB,SAASO,QAAQA,CAAA;EACf,IAAIc,OAAO,GAAG,EAAE;EAChB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACvB,SAAS,EAACuB,CAAC,EAAE,EAAC;IAC1B;IACAD,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACfF,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;;EAGjB,OAAOF,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}