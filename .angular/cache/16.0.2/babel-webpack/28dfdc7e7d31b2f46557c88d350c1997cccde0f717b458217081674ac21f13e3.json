{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//const BASE = \"https://rickandmortyapi.com/api/\";\nconst BASE = \"localhost:8181/api/\";\nconst NUM_CHARACTERS = 8;\nclass BookService {\n  constructor(http) {\n    this.http = http;\n  }\n  get8RndomBooks() {\n    return this.http.get(BASE + \"book/\" + getRndom().join());\n  }\n  getBookByID(id) {\n    return this.http.get(BASE + \"book/\" + id);\n  }\n  getBookByName(name) {\n    return this.http.get(BASE + \"book/title/\" + name);\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});\nexport { BookService };\nfunction getRndom() {\n  let randoms = [];\n  for (let i = 0; i < NUM_CHARACTERS; i++) {\n    randoms.push(Math.floor(Math.random() * 5 + 1));\n  }\n  return randoms;\n}","map":{"version":3,"names":["BASE","NUM_CHARACTERS","BookService","constructor","http","get8RndomBooks","get","getRndom","join","getBookByID","id","getBookByName","name","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","randoms","i","push","Math","floor","random"],"sources":["C:\\Users\\Arnau\\BookMatch\\src\\app\\rick-morty.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n//const BASE = \"https://rickandmortyapi.com/api/\";\nconst BASE = \"localhost:8181/api/\";\nconst NUM_CHARACTERS = 8;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  constructor(private http: HttpClient) { }\n\n  get8RndomBooks(){\n    return this.http.get(BASE+\"book/\"+\n      getRndom().join());\n  }\n\n  getBookByID(id: any){\n    return this.http.get(BASE+\"book/\"+id);\n  }\n\n  getBookByName(name: any){\n    return this.http.get(BASE+\"book/title/\"+name);\n  }\n\n}\n\nfunction getRndom(){\n  let randoms = [];\n  for(let i=0;i<NUM_CHARACTERS;i++){\n    randoms.push(Math.floor(Math.random() * 5 + 1))\n  }\n  return randoms;\n}\n\n\n"],"mappings":";;AAGA;AACA,MAAMA,IAAI,GAAG,qBAAqB;AAClC,MAAMC,cAAc,GAAG,CAAC;AAExB,MAGaC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAACN,IAAI,GAAC,OAAO,GAC/BO,QAAQ,EAAE,CAACC,IAAI,EAAE,CAAC;EACtB;EAEAC,WAAWA,CAACC,EAAO;IACjB,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAACN,IAAI,GAAC,OAAO,GAACU,EAAE,CAAC;EACvC;EAEAC,aAAaA,CAACC,IAAS;IACrB,OAAO,IAAI,CAACR,IAAI,CAACE,GAAG,CAACN,IAAI,GAAC,aAAa,GAACY,IAAI,CAAC;EAC/C;;AAfWV,WAAW,C;mBAAXA,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXd,WAAW,C;SAAXA,WAAW;EAAAe,OAAA,EAAXf,WAAW,CAAAgB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPjB,WAAW;AAmBxB,SAASK,QAAQA,CAAA;EACf,IAAIa,OAAO,GAAG,EAAE;EAChB,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACpB,cAAc,EAACoB,CAAC,EAAE,EAAC;IAC/BD,OAAO,CAACE,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEjD,OAAOL,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}